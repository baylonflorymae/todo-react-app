{"id":"model/userInfo/userIDValidation.js","dependencies":[{"name":"C:\\Users\\baylo\\Documents\\Practice\\Todo-List-App\\.babelrc","includedInParent":true,"mtime":1590066335943},{"name":"C:\\Users\\baylo\\Documents\\Practice\\Todo-List-App\\package.json","includedInParent":true,"mtime":1592314701574},{"name":"../connection","loc":{"line":1,"column":27},"parent":"C:\\Users\\baylo\\Documents\\Practice\\Todo-List-App\\server\\model\\userInfo\\userIDValidation.js","resolved":"C:\\Users\\baylo\\Documents\\Practice\\Todo-List-App\\server\\model\\connection.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserIDValidation = void 0;\n\nvar _connection = require(\"../connection\");\n\n/**\r\n * This checks the user id in the data base if it\r\n * has already existed in the records\r\n * @param {String} user_id - user id of the user\r\n */\nconst UserIDValidation = user_id => {\n  return new Promise((resolve, reject) => {\n    try {\n      _connection.Connection.query(`SELECT IF(COUNT(user_login_id) >= 1, TRUE, FALSE) AS is_user_id_exist FROM user_info_tbl WHERE user_login_id = \"${user_id}\";`, (err, results) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(results);\n      });\n    } catch (error) {\n      return reject(error);\n    }\n  });\n};\n\nexports.UserIDValidation = UserIDValidation;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":7}},{"name":"UserIDValidation","generated":{"line":15,"column":6},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":13}},{"generated":{"line":15,"column":22},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":29}},{"name":"user_id","generated":{"line":15,"column":25},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":33}},{"generated":{"line":15,"column":32},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":32}},{"generated":{"line":15,"column":36},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":45}},{"generated":{"line":16,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":2}},{"generated":{"line":16,"column":9},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":9}},{"name":"Promise","generated":{"line":16,"column":13},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":13}},{"generated":{"line":16,"column":20},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":9}},{"generated":{"line":16,"column":21},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":21}},{"name":"resolve","generated":{"line":16,"column":22},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":22}},{"generated":{"line":16,"column":29},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":21}},{"name":"reject","generated":{"line":16,"column":31},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":31}},{"generated":{"line":16,"column":37},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":21}},{"generated":{"line":16,"column":42},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":42}},{"generated":{"line":17,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":9,"column":4}},{"generated":{"line":17,"column":8},"source":"model/userInfo/userIDValidation.js","original":{"line":9,"column":8}},{"name":"Connection","generated":{"line":18,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":10,"column":6}},{"name":"query","generated":{"line":18,"column":29},"source":"model/userInfo/userIDValidation.js","original":{"line":10,"column":17}},{"generated":{"line":18,"column":34},"source":"model/userInfo/userIDValidation.js","original":{"line":10,"column":6}},{"generated":{"line":18,"column":35},"source":"model/userInfo/userIDValidation.js","original":{"line":11,"column":9}},{"name":"user_id","generated":{"line":18,"column":150},"source":"model/userInfo/userIDValidation.js","original":{"line":11,"column":123}},{"generated":{"line":18,"column":157},"source":"model/userInfo/userIDValidation.js","original":{"line":11,"column":131}},{"generated":{"line":18,"column":161},"source":"model/userInfo/userIDValidation.js","original":{"line":10,"column":6}},{"generated":{"line":18,"column":163},"source":"model/userInfo/userIDValidation.js","original":{"line":12,"column":8}},{"name":"err","generated":{"line":18,"column":164},"source":"model/userInfo/userIDValidation.js","original":{"line":12,"column":9}},{"generated":{"line":18,"column":167},"source":"model/userInfo/userIDValidation.js","original":{"line":12,"column":8}},{"name":"results","generated":{"line":18,"column":169},"source":"model/userInfo/userIDValidation.js","original":{"line":12,"column":14}},{"generated":{"line":18,"column":176},"source":"model/userInfo/userIDValidation.js","original":{"line":12,"column":8}},{"generated":{"line":18,"column":181},"source":"model/userInfo/userIDValidation.js","original":{"line":12,"column":26}},{"generated":{"line":19,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":13,"column":10}},{"name":"err","generated":{"line":19,"column":12},"source":"model/userInfo/userIDValidation.js","original":{"line":13,"column":14}},{"generated":{"line":19,"column":15},"source":"model/userInfo/userIDValidation.js","original":{"line":13,"column":10}},{"generated":{"line":19,"column":17},"source":"model/userInfo/userIDValidation.js","original":{"line":13,"column":19}},{"generated":{"line":20,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":14,"column":12}},{"name":"reject","generated":{"line":20,"column":17},"source":"model/userInfo/userIDValidation.js","original":{"line":14,"column":19}},{"generated":{"line":20,"column":23},"source":"model/userInfo/userIDValidation.js","original":{"line":14,"column":25}},{"name":"err","generated":{"line":20,"column":24},"source":"model/userInfo/userIDValidation.js","original":{"line":14,"column":26}},{"generated":{"line":20,"column":27},"source":"model/userInfo/userIDValidation.js","original":{"line":14,"column":25}},{"generated":{"line":20,"column":28},"source":"model/userInfo/userIDValidation.js","original":{"line":14,"column":12}},{"generated":{"line":21,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":15,"column":11}},{"name":"resolve","generated":{"line":23,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":16,"column":10}},{"name":"resolve","generated":{"line":23,"column":8},"source":"model/userInfo/userIDValidation.js","original":{"line":16,"column":10}},{"generated":{"line":23,"column":15},"source":"model/userInfo/userIDValidation.js","original":{"line":16,"column":17}},{"name":"results","generated":{"line":23,"column":16},"source":"model/userInfo/userIDValidation.js","original":{"line":16,"column":18}},{"generated":{"line":23,"column":23},"source":"model/userInfo/userIDValidation.js","original":{"line":16,"column":17}},{"generated":{"line":23,"column":24},"source":"model/userInfo/userIDValidation.js","original":{"line":16,"column":10}},{"generated":{"line":24,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":17,"column":9}},{"generated":{"line":24,"column":7},"source":"model/userInfo/userIDValidation.js","original":{"line":10,"column":6}},{"generated":{"line":25,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":19,"column":5}},{"generated":{"line":25,"column":5},"source":"model/userInfo/userIDValidation.js","original":{"line":9,"column":4}},{"generated":{"line":25,"column":6},"source":"model/userInfo/userIDValidation.js","original":{"line":19,"column":6}},{"name":"error","generated":{"line":25,"column":13},"source":"model/userInfo/userIDValidation.js","original":{"line":19,"column":13}},{"generated":{"line":25,"column":18},"source":"model/userInfo/userIDValidation.js","original":{"line":19,"column":6}},{"generated":{"line":25,"column":20},"source":"model/userInfo/userIDValidation.js","original":{"line":19,"column":20}},{"generated":{"line":26,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":20,"column":6}},{"name":"reject","generated":{"line":26,"column":13},"source":"model/userInfo/userIDValidation.js","original":{"line":20,"column":13}},{"generated":{"line":26,"column":19},"source":"model/userInfo/userIDValidation.js","original":{"line":20,"column":19}},{"name":"error","generated":{"line":26,"column":20},"source":"model/userInfo/userIDValidation.js","original":{"line":20,"column":20}},{"generated":{"line":26,"column":25},"source":"model/userInfo/userIDValidation.js","original":{"line":20,"column":19}},{"generated":{"line":26,"column":26},"source":"model/userInfo/userIDValidation.js","original":{"line":20,"column":6}},{"generated":{"line":27,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":21,"column":5}},{"generated":{"line":28,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":22,"column":3}},{"generated":{"line":28,"column":3},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":9}},{"generated":{"line":28,"column":4},"source":"model/userInfo/userIDValidation.js","original":{"line":8,"column":2}},{"generated":{"line":29,"column":0},"source":"model/userInfo/userIDValidation.js","original":{"line":23,"column":1}},{"generated":{"line":29,"column":1},"source":"model/userInfo/userIDValidation.js","original":{"line":7,"column":7}}],"sources":{"model/userInfo/userIDValidation.js":"import { Connection } from \"../connection\";\r\n/**\r\n * This checks the user id in the data base if it\r\n * has already existed in the records\r\n * @param {String} user_id - user id of the user\r\n */\r\nexport const UserIDValidation = (user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      Connection.query(\r\n        `SELECT IF(COUNT(user_login_id) >= 1, TRUE, FALSE) AS is_user_id_exist FROM user_info_tbl WHERE user_login_id = \"${user_id}\";`,\r\n        (err, results) => {\r\n          if (err) {\r\n            return reject(err);\r\n          }\r\n          resolve(results);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      return reject(error);\r\n    }\r\n  });\r\n};\r\n"},"lineCount":null}},"error":null,"hash":"d9b89db5b0c92ee93e7eb41c5504b476","cacheData":{"env":{}}}