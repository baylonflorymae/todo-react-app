{"version":3,"sources":["config/config.js","model/connection.js","model/userLogin/userIDValidation.js","controller/userLogin/validateUserID.js","routes.js","server.js"],"names":["mysql","host","port","user","database","password","Connection","createConnection","config","connect","err","console","error","UserIDValidation","user_id","Promise","resolve","reject","query","results","validateUserID","req","res","result","send","is_user_id_exist","Boolean","sendStatus","router","express","Router","get","app","process","env","PORT","use","json","static","path","join","__dirname","apiRoutes","sendFile","listen","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAAe;AACbA,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,WADD;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGLC,IAAAA,IAAI,EAAE,MAHD;AAILC,IAAAA,QAAQ,EAAE,MAJL;AAKLC,IAAAA,QAAQ,EAAE;AALL;AADM;;;;;;;;;;ACAf;;AACA;;;;;;;;AAEO,MAAMC,UAAU,GAAGN,KAAK,CAACO,gBAAN,CAAuBC,gBAAOR,KAA9B,CAAnB;;AAEPM,UAAU,CAACG,OAAX,CAAoBC,GAAD,IAAS;AAC1B,MAAIA,GAAJ,EAASC,OAAO,CAACC,KAAR,CAAcF,GAAd;AACV,CAFD;;;;;;;;;ACLA;;AACA;;;;;AAKO,MAAMG,gBAAgB,GAAIC,OAAD,IAAa;AAC3C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI;AACFX,6BAAWY,KAAX,CACG,mHAAkHJ,OAAQ,IAD7H,EAEE,CAACJ,GAAD,EAAMS,OAAN,KAAkB;AAChB,YAAIT,GAAJ,EAAS;AACP,iBAAOO,MAAM,CAACP,GAAD,CAAb;AACD;;AACDM,QAAAA,OAAO,CAACG,OAAD,CAAP;AACD,OAPH;AASD,KAVD,CAUE,OAAOP,KAAP,EAAc;AACd,aAAOK,MAAM,CAACL,KAAD,CAAb;AACD;AACF,GAdM,CAAP;AAeD,CAhBM;;;;;;;;;;;ACNP;;AAEO,MAAMQ,cAAc,GAAG,CAACC,GAAD,EAAMC,GAAN,KAC5B,IAAIP,OAAJ,CAAY,YAAY;AACtB,MAAI;AACF,UAAM;AAAED,MAAAA;AAAF,QAAcO,GAAG,CAACH,KAAxB;AAEA,UAAMK,MAAM,GAAG,MAAM,wCAAiBT,OAAjB,CAArB;AAEAQ,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,gBAAgB,EAAEC,OAAO,CAACH,MAAM,CAAC,CAAD,CAAN,CAAUE,gBAAX;AAA3B,KAAT;AACD,GAND,CAME,OAAOb,KAAP,EAAc;AACdU,IAAAA,GAAG,CAACK,UAAJ,CAAe,GAAf;AACD;AACF,CAVD,CADK;;;;;;;;;;;ACFP;;AACA;;;;AAEA,MAAMC,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAEAF,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBX,8BAApB;eAEe;AACbQ,EAAAA;AADa;;;;;ACPf;;AACA;;AACA;;;;AAEA,MAAMI,GAAG,GAAG,uBAAZ;AACA,MAAM9B,IAAI,GAAG+B,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAH,GAAG,CAACI,GAAJ,CAAQP,iBAAQQ,IAAR,EAAR;AAEAL,GAAG,CAACI,GAAJ,CAAQ,SAAR,EAAmBP,iBAAQS,MAAR,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAAf,CAAnB;AACAT,GAAG,CAACI,GAAJ,CAAQ,MAAR,EAAgBM,gBAAUd,MAA1B;AAEAI,GAAG,CAACD,GAAJ,CAAQ,IAAR,EAAc,CAACV,GAAD,EAAMC,GAAN,KACZA,GAAG,CAACqB,QAAJ,CAAaJ,cAAKC,IAAL,CAAUC,SAAV,EAAqB,sBAArB,CAAb,CADF;AAIAT,GAAG,CAACY,MAAJ,CAAW1C,IAAX,EAAiB,MACfS,OAAO,CAACkC,GAAR,CAAa,6CAA4C3C,IAAK,EAA9D,CADF","file":"server.js","sourceRoot":"..\\server","sourcesContent":["export default {\r\n  mysql: {\r\n    host: \"localhost\",\r\n    port: 3306,\r\n    user: \"root\",\r\n    database: \"todo\",\r\n    password: \"1994\",\r\n  },\r\n};\r\n","import * as mysql from \"mysql\";\r\nimport config from \"../config/config\";\r\n\r\nexport const Connection = mysql.createConnection(config.mysql);\r\n\r\nConnection.connect((err) => {\r\n  if (err) console.error(err);\r\n});\r\n","import { Connection } from \"../connection\";\r\n/**\r\n * This checks the user id in the data base if it\r\n * has already existed in the records\r\n * @param {String} user_id - user id of the user\r\n */\r\nexport const UserIDValidation = (user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      Connection.query(\r\n        `SELECT IF(COUNT(user_login_id) >= 1, TRUE, FALSE) AS is_user_id_exist FROM user_info_tbl WHERE user_login_id = \"${user_id}\";`,\r\n        (err, results) => {\r\n          if (err) {\r\n            return reject(err);\r\n          }\r\n          resolve(results);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      return reject(error);\r\n    }\r\n  });\r\n};\r\n","import { UserIDValidation } from \"../../model/userLogin/userIDValidation\";\r\n\r\nexport const validateUserID = (req, res) =>\r\n  new Promise(async () => {\r\n    try {\r\n      const { user_id } = req.query;\r\n\r\n      const result = await UserIDValidation(user_id);\r\n\r\n      res.send({ is_user_id_exist: Boolean(result[0].is_user_id_exist) });\r\n    } catch (error) {\r\n      res.sendStatus(500);\r\n    }\r\n  });\r\n","import express from \"express\";\r\nimport { validateUserID } from \"./controller/userLogin/validateUserID\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/todo\", validateUserID);\r\n\r\nexport default {\r\n  router,\r\n};\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport apiRoutes from \"./routes\";\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 5000;\r\napp.use(express.json());\r\n\r\napp.use(\"/static\", express.static(path.join(__dirname, \"../dist\")));\r\napp.use(\"/api\", apiRoutes.router);\r\n\r\napp.get(\"/*\", (req, res) =>\r\n  res.sendFile(path.join(__dirname, \"../public/index.html\"))\r\n);\r\n\r\napp.listen(port, () =>\r\n  console.log(`Example app listening at http://localhost:${port}`)\r\n);\r\n"]}